import atexit
from aiogram import Bot, Dispatcher, executor, types
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from dotenv import load_dotenv
import os
import random
import string
import logging


logging.basicConfig(level=logging.INFO, filename='log.txt', filemode='a',
                    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

load_dotenv()
bot = Bot(os.getenv('TOKEN'))
dp = Dispatcher(bot)

WORDS = ["–∞–π–æ–≥—Ä–∞–º", "–ø–∏—Ç–æ–Ω", "—Ç–µ–ª–µ–≥—Ä–∞–º", "–≤–∏—Å–µ–ª–∏—Ü–∞", "–ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ", "–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ", "–∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ—Å—Ç—å", "–±–æ—Ç"]
games = {}
reviews = {}

def log_divider():
    logger.info("__________ Program is finished __________")

atexit.register(log_divider)

def log_message(user, message_text):
    username = f"@{user.username}" if user.username else user.first_name
    logger.info(f"Message from {username}: {message_text}")

class HangmanGame:
    def __init__(self, secret_word):
        self.secret_word = secret_word.upper()
        self.guessed_letters = set()
        self.attempts = len(secret_word) + 3

    def guess_letter(self, letter):
        letter = letter.upper()
        if letter in self.secret_word:
            self.guessed_letters.add(letter)
            return True
        else:
            self.attempts -= 1
            return False

    def get_display_word(self):
        return ' '.join(letter if letter in self.guessed_letters else '_' for letter in self.secret_word)

    def is_game_over(self):
        return self.attempts <= 0 or all(letter in self.guessed_letters for letter in self.secret_word)

    def is_victory(self):
        return all(letter in self.guessed_letters for letter in self.secret_word)

def rating_keyboard():
    keyboard = InlineKeyboardMarkup()
    for i in range(1, 6):
        keyboard.add(InlineKeyboardButton(f"{i} ‚≠êÔ∏è", callback_data=f"rate_{i}"))
    return keyboard

def generate_game_keyboard():
    keyboard = InlineKeyboardMarkup()
    keyboard.add(InlineKeyboardButton("–°–¥–∞—Ç—å—Å—è", callback_data="surrender"))
    keyboard.add(InlineKeyboardButton("–ü–æ–º–æ—â—å", callback_data="help"))
    return keyboard

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /review
@dp.message_handler(commands=['review'])
async def review_command(message: types.Message):
    log_message(message.from_user, message.text)
    await message.answer("–û—Ü–µ–Ω–∏—Ç–µ –±–æ—Ç–∞ –æ—Ç 1 –¥–æ 5 –∑–≤–µ–∑–¥:", reply_markup=rating_keyboard())

#–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /surrender
@dp.callback_query_handler(lambda c: c.data == 'surrender')
async def process_surrender(callback_query: types.CallbackQuery):
    user_id = callback_query.from_user.id
    game_code = next((code for code, game in games.items() if game['user_id'] == user_id), None)
    if game_code:
        game = games[game_code]
        await bot.send_message(user_id, f"–í—ã —Å–¥–∞–ª–∏—Å—å. –ü—Ä–∞–≤–∏–ª—å–Ω–æ–µ —Å–ª–æ–≤–æ –±—ã–ª–æ: `{game['game'].secret_word}`. –ù–µ –æ—Ç—á–∞–∏–≤–∞–π—Ç–µ—Å—å –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞! /start –¥–ª—è –Ω–æ–≤–æ–π –∏–≥—Ä—ã.", parse_mode='Markdown')
        del games[game_code]  # –£–¥–∞–ª–µ–Ω–∏–µ –∏–≥—Ä—ã –ø–æ—Å–ª–µ —Å–¥–∞—á–∏
    else:
        await bot.send_message(user_id, "–ö–∞–∂–µ—Ç—Å—è, —É –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∏–≥—Ä. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –Ω–æ–≤—É—é –∏–≥—Ä—É.")
    await bot.answer_callback_query(callback_query.id)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —Ä–µ–π—Ç–∏–Ω–≥–∞
@dp.callback_query_handler(lambda c: c.data.startswith('rate_'))
async def process_rating(callback_query: types.CallbackQuery):
    rate = callback_query.data.split('_')[1]
    user_id = callback_query.from_user.id  # –ò—Å–ø–æ–ª—å–∑—É–µ–º user_id –¥–ª—è –∫–ª—é—á–∞ –≤ reviews
    username = f"@{callback_query.from_user.username}" if callback_query.from_user.username else callback_query.from_user.first_name
    reviews[user_id] = {'rate': rate, 'text': None, 'username': username}  # –°–æ—Ö—Ä–∞–Ω—è–µ–º username –∑–¥–µ—Å—å –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
    await bot.answer_callback_query(callback_query.id)
    await bot.send_message(user_id, "–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à—É –æ—Ü–µ–Ω–∫—É! –ù–∞–ø–∏—à–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–∞—à –æ—Ç–∑—ã–≤.")

@dp.message_handler(lambda message: message.from_user.id in reviews and reviews[message.from_user.id]['text'] is None)
async def handle_review_text(message: types.Message):
    user_id = message.from_user.id
    review_info = reviews[user_id]
    review_info['text'] = message.text
    try:
        with open('reviews.txt', 'a', encoding='utf-8') as file:
            file.write(f"UserID: {review_info['username']}, Rating: {review_info['rate']}, Review: {message.text}\n")
        await message.answer("–í–∞—à –æ—Ç–∑—ã–≤ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω! –°–ø–∞—Å–∏–±–æ –∑–∞ –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å.")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –æ—Ç–∑—ã–≤–∞: {e}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –≤–∞—à–µ–≥–æ –æ—Ç–∑—ã–≤–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")

@dp.message_handler(commands=['help'])
async def help_command(message: types.Message):
    log_message(message.from_user, message.text)
    help_text = ("–ö–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞:\n"
                 "/start - –Ω–∞—á–∞—Ç—å –Ω–æ–≤—É—é –∏–≥—Ä—É\n"
                 "/setword - –∑–∞–≥–∞–¥–∞—Ç—å —Å–ª–æ–≤–æ –¥–ª—è –¥—Ä—É–≥–∞\n"
                 "/social - —Å–≤—è–∑–∞—Ç—å—Å—è —Å –∞–≤—Ç–æ—Ä–æ–º –±–æ—Ç–∞\n"
                 "/review - –æ—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤\n"
                 "/about - –æ –±–æ—Ç–µ\n"
                 "/help - –ø–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É\n"
                 "–ß—Ç–æ–±—ã —Å–¥–µ–ª–∞—Ç—å –ø—Ä–µ–¥–ø–æ–ª–æ–∂–µ–Ω–∏–µ, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–¥ –∏–≥—Ä—ã –∏ –±—É–∫–≤—É –∏–ª–∏ —Å–ª–æ–≤–æ (–Ω–∞–ø—Ä–∏–º–µ—Ä, ABCDE –ø–∏—Ç–æ–Ω).")
    await message.reply(help_text)

@dp.message_handler(commands=['start', 'restart'])
async def start_game(message: types.Message):
    user_id = message.from_user.id
    game_code = ''.join(random.choices(string.ascii_uppercase + string.digits, k=5))
    secret_word = random.choice(WORDS)
    games[game_code] = {'game': HangmanGame(secret_word), 'user_id': user_id}
    await message.reply(
        f"–ò–≥—Ä–∞ '–í–∏—Å–µ–ª–∏—Ü–∞' –Ω–∞—á–∞–ª–∞—Å—å! –£–≥–∞–¥–∞–π—Ç–µ –±—É–∫–≤—É, –æ—Ç–ø—Ä–∞–≤–∏–≤ –µ–µ. –í–∞—à –∫–æ–¥ –∏–≥—Ä—ã: `{game_code}`. –£ –≤–∞—Å {len(secret_word) + 5} –ø–æ–ø—ã—Ç–æ–∫. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã —Å–¥–∞—Ç—å—Å—è.",
        parse_mode='Markdown', reply_markup=generate_game_keyboard())

@dp.message_handler(commands=['about'])
async def about_command(message: types.Message):
    about_text = """
–ü—Ä–æ–µ–∫—Ç "–í–∏—Å–µ–ª–∏—Ü–∞ –≤ Telegram" ‚Äî —ç—Ç–æ –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–∞—è –∏–≥—Ä–∞, —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–∞—è –≤ –≤–∏–¥–µ Telegram-–±–æ—Ç–∞. 
–û—Å–Ω–æ–≤–Ω–∞—è —Ü–µ–ª—å –∏–≥—Ä—ã ‚Äî —Ä–∞–∑–≤–ª–µ—á–µ–Ω–∏–µ –∏ –æ–±—É—á–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –ø–æ–∑–≤–æ–ª—è—è –∏–º —É–≥–∞–¥—ã–≤–∞—Ç—å —Å–ª–æ–≤–∞ –ø–æ –±—É–∫–≤–∞–º.

‚ú® **–û—Å–Ω–æ–≤–Ω—ã–µ –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏ –ø—Ä–æ–µ–∫—Ç–∞:**
- –ò–≥—Ä–∞ "–í–∏—Å–µ–ª–∏—Ü–∞" —Å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å—é —É–≥–∞–¥—ã–≤–∞–Ω–∏—è —Å–ª–æ–≤.
- –°–∏—Å—Ç–µ–º–∞ –æ—Ç–∑—ã–≤–æ–≤ —Å —Ä–µ–π—Ç–∏–Ω–≥–æ–º.
- –ö–æ–º–∞–Ω–¥—ã –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∏–≥—Ä–æ–π –∏ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å –±–æ—Ç–æ–º.

üìñ **–°–º—ã—Å–ª –ø—Ä–æ–µ–∫—Ç–∞:**
–ü—Ä–æ–µ–∫—Ç —Å–æ–∑–¥–∞–Ω –¥–ª—è –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º Telegram –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ –ø—Ä–æ–≤–µ—Å—Ç–∏ –≤—Ä–µ–º—è, –∞ —Ç–∞–∫–∂–µ —Ä–∞—Å—à–∏—Ä–∏—Ç—å —Å–≤–æ–π —Å–ª–æ–≤–∞—Ä–Ω—ã–π –∑–∞–ø–∞—Å. –í –ø—Ä–æ—Ü–µ—Å—Å–µ –∏–≥—Ä—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –º–æ–≥—É—Ç —É—á–∏—Ç—å –Ω–æ–≤—ã–µ —Å–ª–æ–≤–∞ –∏ —Ç–µ—Ä–º–∏–Ω—ã.

üî® **–¢–µ—Ö–Ω–æ–ª–æ–≥–∏–∏ –∏ –ø—Ä–∏–Ω—Ü–∏–ø—ã:**
–î–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –±–æ—Ç–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∞—Å—å –±–∏–±–ª–∏–æ—Ç–µ–∫–∞ aiogram –Ω–∞ —è–∑—ã–∫–µ Python, —á—Ç–æ –æ–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç –ø—Ä–æ—Å—Ç–æ—Ç—É —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ –∏ –≤—ã—Å–æ–∫—É—é –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å. –ü—Ä–æ–µ–∫—Ç –ø—Ä–∏–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è –ø—Ä–∏–Ω—Ü–∏–ø–æ–≤ –ø—Ä–æ—Å—Ç–æ—Ç—ã –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ –∏ –∏–Ω—Ç—É–∏—Ç–∏–≤–Ω–æ –ø–æ–Ω—è—Ç–Ω–æ–≥–æ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º.

üë§ **–û —Å–æ–∑–¥–∞—Ç–µ–ª–µ:**
–ü—Ä–æ–µ–∫—Ç —Ä–∞–∑—Ä–∞–±–æ—Ç–∞–Ω [–ì–µ–≤–æ—Ä–∫—è–Ω–æ–º –ë–∞–≥—Ä–∞—Ç–æ–º].

–°–ø–∞—Å–∏–±–æ, —á—Ç–æ –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç–µ—Å—å –º–æ–∏–º –ø—Ä–æ–µ–∫—Ç–æ–º! –ï—Å–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å –≤–æ–ø—Ä–æ—Å—ã –∏–ª–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /social, —á—Ç–æ–±—ã —Å–≤—è–∑–∞—Ç—å—Å—è —Å–æ –º–Ω–æ–π.
    """
    await message.answer(about_text, parse_mode='Markdown')

@dp.message_handler(commands=['setword'])
async def set_word(message: types.Message):
    log_message(message.from_user, message.text)
    args = message.get_args().split()
    if len(args) != 1:
        await message.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ: /setword <—Å–ª–æ–≤–æ>")
        return
    secret_word = args[0]
    if not secret_word.isalpha():
        await message.reply("–°–ª–æ–≤–æ –¥–æ–ª–∂–Ω–æ —Å–æ—Å—Ç–æ—è—Ç—å —Ç–æ–ª—å–∫–æ –∏–∑ –±—É–∫–≤.")
        return
    game_code = ''.join(random.choices(string.ascii_uppercase + string.digits, k=5))
    games[game_code] = HangmanGame(secret_word)
    await message.reply(
        f"–°–ª–æ–≤–æ –¥–ª—è –∏–≥—Ä—ã —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ. –ö–æ–¥ –∏–≥—Ä—ã: `{game_code}`. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —ç—Ç–æ—Ç –∫–æ–¥. –£ –≤–∞—Å {len(secret_word) + 5} –ø–æ–ø—ã—Ç–æ–∫.",
        parse_mode='Markdown', reply_markup=generate_game_keyboard())


@dp.callback_query_handler(lambda c: c.data == 'new_game')
async def process_new_game_callback_query(callback_query: types.CallbackQuery):
    log_message(callback_query.from_user, callback_query.data)
    await start_game(callback_query.message)


@dp.callback_query_handler(lambda c: c.data == 'set_word')
async def process_set_word_callback_query(callback_query: types.CallbackQuery):
    log_message(callback_query.from_user, callback_query.data)
    await callback_query.message.reply("–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–ª–æ–≤–æ –≤ —Ñ–æ—Ä–º–∞—Ç–µ /setword <—Å–ª–æ–≤–æ>")


@dp.callback_query_handler(lambda c: c.data == 'help')
async def process_help_callback_query(callback_query: types.CallbackQuery):
    log_message(callback_query.from_user, callback_query.data)
    await help_command(callback_query.message)


@dp.message_handler(commands=['social'])
async def social_command(message: types.Message):
    log_message(message.from_user, message.text)
    keyboard = InlineKeyboardMarkup()
    keyboard.add(InlineKeyboardButton("Telegram", url="https://t.me/swizzy_ed"))
    keyboard.add(InlineKeyboardButton("Steam", url="https://steamcommunity.com/profiles/76561199070099207/"))
    keyboard.add(InlineKeyboardButton("Github", url="https://github.com/megafortniter49"))
    await message.reply("–°–≤—è–∑–∞—Ç—å—Å—è —Å –∞–≤—Ç–æ—Ä–æ–º –±–æ—Ç–∞:", reply_markup=keyboard)

async def process_guess_logic(game, guess, message, is_word=False):
    correct = False
    if not is_word:
        correct = game.guess_letter(guess)
    else:
        correct = guess.upper() == game.secret_word
        if correct:
            game.guessed_letters = set(game.secret_word)  # –°—á–∏—Ç–∞–µ–º –≤—Å–µ –±—É–∫–≤—ã —É–≥–∞–¥–∞–Ω–Ω—ã–º–∏
    if correct:
        if game.is_victory():
            await message.answer(f"–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã —É–≥–∞–¥–∞–ª–∏ —Å–ª–æ–≤–æ: `{game.secret_word}`. /restart —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ.", parse_mode='Markdown')
            return
    else:
        if game.is_game_over():
            await message.answer(f"–ò–≥—Ä–∞ –æ–∫–æ–Ω—á–µ–Ω–∞! –°–ª–æ–≤–æ –±—ã–ª–æ: `{game.secret_word}`. /restart —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ.", parse_mode='Markdown')
            return
    await message.answer(f"{game.get_display_word()} –û—Å—Ç–∞–ª–æ—Å—å –ø–æ–ø—ã—Ç–æ–∫: {game.attempts}", reply_markup=generate_game_keyboard())

@dp.message_handler()
async def guess_letter(message: types.Message):
    log_message(message.from_user, message.text)
    parts = message.text.strip().upper().split(maxsplit=1)  # –†–∞–∑–¥–µ–ª—è–µ–º –Ω–∞ 2 —á–∞—Å—Ç–∏: –∫–æ–¥ –∏–≥—Ä—ã –∏ –ø—Ä–µ–¥–ø–æ–ª–æ–∂–µ–Ω–∏–µ
    if len(parts) == 2:
        game_code, guess = parts
        if game_code in games and games[game_code]['user_id'] == message.from_user.id:
            game = games[game_code]['game']
            if len(guess) == 1:  # –ï—Å–ª–∏ –≤–≤–æ–¥ –æ–¥–Ω–æ–π –±—É–∫–≤—ã
                await process_guess_logic(game, guess, message)
            else:  # –ï—Å–ª–∏ –≤–≤–æ–¥ —Ü–µ–ª–æ–≥–æ —Å–ª–æ–≤–∞
                await process_guess_logic(game, guess, message, is_word=True)
        else:
            await message.reply("–ö–æ–¥ –∏–≥—Ä—ã –Ω–µ–≤–µ—Ä–Ω—ã–π –∏–ª–∏ –∏–≥—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
    else:
        await message.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–¥ –∏–≥—Ä—ã –∏ –±—É–∫–≤—É –∏–ª–∏ —Å–ª–æ–≤–æ –¥–ª—è —É–≥–∞–¥—ã–≤–∞–Ω–∏—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, ABCDE –ë).")


if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)
